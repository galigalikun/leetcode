fn main() {
    assert_eq!(
        Solution::three_sum(vec![-1, 0, 1, 2, -1, -4]),
        vec![vec![-1, 0, 1], vec![-1, 2, -1]]
    );
    // assert_eq!(Solution::three_sum(vec![]), vec![]);
    // assert_eq!(Solution::three_sum(vec![0]), vec![vec![]]);
    assert_eq!(Solution::three_sum(vec![0, 0, 0, 0]), vec![vec![0, 0, 0]]);
    assert_eq!(Solution::three_sum(vec![-1, 0, 1, 0]), vec![vec![-1, 0, 1]]);
    // assert_eq!(
    //     Solution::three_sum(vec![
    //         14, 4, 6, -1, 10, 9, -8, 7, -13, 14, -13, -11, -8, -9, 11, 14, -8, -14, -13, 7, -10,
    //         -15, -13, -11, -11, 11, 14, 13, 2, -14, 1, -7, -2, 14, -1, -15, 9, 7, -1, 3, 6, 1, 7,
    //         5, -1, -5, 4, -2, -4, -1, -9, -7, -1, -7, -11, 3, 12, 10, -7, -1, 12, 1, 8, -13, 1, 14,
    //         9, -13, 6, -7, -3, -11, 2, -11, 10, -14, -1, -9, 0, 2, 5, 6, 3, -11, 6, 7, 0, 3, 3, 0,
    //         -12, -8, -13, 3, -14, -5, 2, 10, -11, -14, -12, 1, -10, 5, 5, 7, -1, 11, 14, 6, -10,
    //         -4, -3, 8, -7, 10, 1, 8, -1, -11, -15, -6, -12, -13, 12, -11
    //     ]),
    //     vec![vec![-1, 0, 1]]
    // );
    // [[14, -1, -13], [14, -8, -6], [14, -11, -3], [14, -9, -5], [14, -14, 0], [14, -10, -4], [14, -15, 1], [14, -7, -7], [14, -2, -12], [4, 6, -10], [4, -1, -3], [4, 10, -14], [4, 9, -13], [4, -8, 4], [4, 7, -11], [4, -9, 5], [4, 11, -15], [4, 2, -6], [4, 1, -5], [4, -7, 3], [4, -2, -2], [4, -4, 0], [4, 8, -12], [6, -1, -5], [6, 9, -15], [6, -8, 2], [6, 7, -13], [6, -11, 5], [6, -9, 3], [6, -14, 8], [6, 1, -7], [6, -2, -4], [6, 6, -12], [6, -3, -3], [6, 0, -6], [-1, 10, -9], [-1, 9, -8], [-1, 7, -6], [-1, -11, 12], [-1, 11, -10], [-1, 13, -12], [-1, 2, -1], [-1, 1, 0], [-1, -7, 8], [-1, -2, 3], [-1, 5, -4], [10, -8, -2], [10, -13, 3], [10, -11, 1], [10, -10, 0], [10, -15, 5], [10, 2, -12], [10, -7, -3], [10, -5, -5], [10, -4, -6], [9, -11, 2], [9, -9, 0], [9, -14, 5], [9, -10, 1], [9, -7, -2], [9, 3, -12], [9, -5, -4], [9, -3, -6], [-8, 7, 1], [-8, 11, -3], [-8, 13, -5], [-8, 3, 5], [-8, -4, 12], [-8, 8, 0], [7, -9, 2], [7, -14, 7], [7, -10, 3], [7, -15, 8], [7, -7, 0], [7, -2, -5], [7, 5, -12], [7, -4, -3], [-13, 11, 2], [-13, 13, 0], [-13, 1, 12], [-13, 5, 8], [-11, 11, 0], [-11, 13, -2], [-11, 3, 8], [-9, 11, -2], [-9, 13, -4], [-9, 1, 8], [-9, 12, -3], [11, -14, 3], [11, 1, -12], [11, -7, -4], [11, -5, -6], [-14, 13, 1], [-14, 2, 12], [-10, 13, -3], [-10, 2, 8], [-10, -2, 12], [-10, 5, 5], [-15, 13, 2], [-15, 3, 12], [13, -7, -6], [2, 1, -3], [2, -7, 5], [2, -2, 0], [2, 3, -5], [2, -4, 2], [1, -2, 1], [1, 3, -4], [1, 5, -6], [-7, -5, 12], [-2, 5, -3], [-2, 8, -6], [3, 3, -6], [3, -3, 0], [5, -5, 0], [-5, 8, -3], [-4, 8, -4], [12, 0, -12], [0, 0, 0]]
}

use std::collections::HashMap;
struct Solution {}

impl Solution {
    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {
        if nums.len() < 3 {
            return vec![];
        }
        let mut result: Vec<Vec<i32>> = Vec::new();
        let mut map: HashMap<i32, Vec<usize>> = HashMap::new();
        for i in 0..nums.len() {
            if let Some(n) = map.get_mut(&nums[i]) {
                (*n).push(i);
            } else {
                map.insert(nums[i], vec![i]);
            }
        }
        let mut duplicate = HashMap::new();
        for a in 0..nums.len() - 1 {
            for b in (a + 1)..nums.len() {
                let c = -1 * (nums[a] + nums[b]);
                if let Some(n) = map.get(&c) {
                    let mut test = false;
                    for &i in n {
                        if i != a && i != b {
                            test = true;
                            break;
                        }
                    }
                    if test {
                        let mut ss = vec![nums[a], nums[b], c];
                        ss.sort();

                        if None == duplicate.get(&ss) {
                            result.push(vec![nums[a], nums[b], c]);
                            duplicate.insert(ss, true);
                        }
                    }
                }
            }
        }
        return result;
    }
}
